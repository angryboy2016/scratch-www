@import "../../mq-config";    
@import "../../mq";             // TODO: npm or direct? https://github.com/sass-mq/sass-mq
@import "../../mq-helper";      

@import "../../colors";
@import "../../frameless";

$base-bg: $ui-white;

#view {
    padding: 0; // Q: what does this do?
}

// .mod-ttt-title, to avoid collision with .title-banner.mod-tt in ttt modal
.title-banner.mod-ttt-title {
    background-color: $ui-blue;
}


///////////////////////

.title-banner {
    lost-flex-container: row;
}


.ttt-section {
    // display: flex;
    // flex-wrap: wrap;
    // Instead of flex-ifying this container manually, we use Lost Grid's PostCSS helper:
    //  lost-flex-container: row;

    // But, we move it up to the parent, so all the elements inside of it can take advantage of the grid

    // No need to center manually, we'll use the grid columns in the centered element
    // + offset to position horizontally
    // margin: 0 auto;
    // justify-content: center;
    // align-items: center;
    // text-align: center;

    // Replace it with:
    lost-column: 6/12; 
    // Lost Grid processes this via PostCSS and outputs:
    // width: calc(99.9% * 6/12 - 0.5em);  // 0.5em is based on our gutters, that we defined globally in _mq.config.scss

    // Now let's position this element left/right in terms of the columns we defined above with:
    lost-offset: -3/12; // Denominator needs to be the same as lost-column declare above it, or the calcs get messed up
   
    // Lost Grid processes this via PostCSS and outputs:
    // margin-left: calc(99.9% * 0.25 - 0.75em + 1em) !important;

   // side note: the negative syntax is unlike most other grid systems, Bootstrap, Neat,  
   // They are working on it: https://github.com/peterramsing/lost#lost-offset

}

.ttt-banner-image {
    // Instead of us calcing the width and centering it ourselves, we
    // declare width in terms of grid columns. Comment this:
    // max-width: calc(100% - 2rem); 

    // make sure it fills full space it's been given inside the grid columns
    // Ideally, this is a resuable helper, or even better, images default to 100%
    // and always depend on their parent for sizing
    width: 100%;
}



.title-banner-h1,
.title-banner-p {

    // overriding component behavior here for demo
    // Ideally we defer layout to page layouts, and outside of components?
    margin: 0 !important; 
    max-width: none !important;

    lost-column: 6/12; 
    lost-offset: -3/12; // Denominator needs to be the same as lost-column declare above it, or the calcs get messed up
}





/* 
//4 columns
@media only screen and (max-width: $mobile - 1) {

    .title-banner {
        &.masthead {
            padding-bottom: 1.25rem;

            p {
                max-width: $cols4;
            }
        }
    }

    .ttt-section.mod-title-banner {
        max-width: $mobile;
    }
}

//6 columns
@media only screen and (min-width: $mobile) and (max-width: $tablet - 1) {
    .title-banner {
        &.masthead {

            p {
                max-width: $cols6;
            }
        }
    }

    .ttt-section.mod-title-banner {
        max-width: $mobile;
    }
}


//8 columns
@media only screen and (min-width: $tablet) and (max-width: $desktop - 1) {
    .title-banner {
        &.masthead {
            padding-bottom: 2rem;

            p {
                max-width: $cols8;
            }
        }
    }

    .ttt-section.mod-title-banner {
        max-width: $tablet;
    }
}

// 12 columns
@media only screen and (min-width: $desktop) {
    .title-banner {
        &.masthead {
            padding-bottom: 1.25rem;

            p {
                max-width: $cols8;
            }
        }
    }
} */